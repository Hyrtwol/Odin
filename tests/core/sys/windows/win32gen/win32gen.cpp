#define WIN32_LEAN_AND_MEAN // Exclude rarely-used stuff from Windows headers
#include <windows.h>
#include <timeapi.h>
#include <mmeapi.h>
#include <iostream>
#include <fstream>
#include <filesystem>
#include <map>
using namespace std;
using namespace std::filesystem;

#define test_proc_begin(name) out << endl << "@(test)" << endl << name << " :: proc(t: ^testing.T) {" << endl
#define test_proc_end() out << "}" << endl
#define test_proc_using(name) out << '\t' << "using " << name << endl

#define expect_struct_size_1(s)out << '\t' << "expectf(t, size_of(" << #s << "), " << sizeof(s) << ")" << endl
#define expect_struct_size(s)out << '\t' << "expect_size(t, " << #s << ", " << sizeof(s) << ")" << endl

auto win32 = new string[] { "win32", "core:sys/windows" };

void verify_gdi32_struct_sizes(ofstream& out) {
	test_proc_begin(__func__);
	test_proc_using(win32[0]);

	expect_struct_size(BITMAPV5HEADER);
	expect_struct_size(CIEXYZTRIPLE);
	expect_struct_size(CIEXYZ);
	expect_struct_size(FXPT2DOT30);

	expect_struct_size(RGBQUAD);
	expect_struct_size(PIXELFORMATDESCRIPTOR);
	expect_struct_size(BITMAPINFOHEADER);
	expect_struct_size(BITMAP);

	test_proc_end();
}

void verify_winmm_struct_sizes(ofstream& out) {
	test_proc_begin(__func__);
	test_proc_using(win32[0]);

	expect_struct_size(TIMECAPS);
	expect_struct_size(MMTIME);
	expect_struct_size(WAVEFORMATEX);
	expect_struct_size(WAVEHDR);
	expect_struct_size(WAVEINCAPSW);
	expect_struct_size(WAVEOUTCAPSW);

	test_proc_end();
}

void test_core_sys_windows(ofstream& out) {
	out << "//+build windows" << endl
		<< "package " << __func__
		<< " // generated by " << path(__FILE__).filename().replace_extension("").string() << endl
		<< endl;

	out	<< "import \"core:testing\"" << endl
		<< "import " << win32[0] << " \"" << win32[1] << "\"" << endl;

	verify_gdi32_struct_sizes(out);
	verify_winmm_struct_sizes(out);
}

int main(int argc, char* argv[]) {
	if (argc < 2) { cout << "Usage: " << path(argv[0]).filename().string() << " <odin-output-file>" << endl; return -1; }
	auto filepath = path(argv[1]);
	cout << "Writing " << filepath.string() << endl;
	ofstream out(filepath);
	test_core_sys_windows(out);
	out.close();
}
